from telebot import types, TeleBot
from yandex import translate_word
import work_db as wb
from telebot.handler_backends import State, StatesGroup
import random
import models as md


token = '7047239962:AAEmpbIxf2RlZLzAb1hvZ2MgNwj4Xrv3PnA'
bot = TeleBot(token)

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

def show_hint(*lines):
    return '\n'.join(lines)

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    WORKOUT = '–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üí™'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


###–Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç üëã')
    sent_msg = bot.send_message(message.chat.id, " –ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–æ—à–∞. –Ø —Ç–≥ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ —Ç–≤–æ—ë –∏–º—è?")
    bot.register_next_step_handler(sent_msg, create_user)

def create_user(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = types.KeyboardButton('/Start_my_training')
    markup.add(keyboard)
    name = message.text
    wb.create_user(session, message.from_user.id, name)
    bot.send_message(message.chat.id, '''–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å. 
\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
\n–ù–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ —É —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 20 —Å–ª–æ–≤.
\n–ù–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
\n\n–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
\n—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è''', reply_markup=markup)

@bot.message_handler(commands=['Start_my_training'])
def button_message(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ –Ω–∞–¥–æ?', reply_markup=buttons(1))


### –ë–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_command(message):
    sent_msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å(–≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ)?")
    bot.register_next_step_handler(sent_msg, add_verification)

def add_verification(message):
    word = message.text.lower()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–•–æ—á—É –¥–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –≤–∞–º')
    markup.add(item1)
    sent_msg = bot.send_message(message.chat.id,
    f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{word}'.", reply_markup=markup)
    bot.register_next_step_handler(sent_msg, add, word)

def add(message, word):
    ans = message.text.lower()
    if ans == '—Ö–æ—á—É –¥–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –≤–∞–º':
        ans = translate_word(word).lower()
        wb.add_card(session, message.from_user.id, word, ans)
    else:
        wb.add_card(session, message.from_user.id, word, ans)
    bot.send_message(message.chat.id,
    f'–ü–∞—Ä–∞ —Å–ª–æ–≤ "{word}-{ans}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å', reply_markup=buttons(1))


### –±–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def dell_command(message):
    sent_message = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    bot.register_next_step_handler(sent_message, dell_word)

def dell_word(message):
    ans = message.text.lower()
    wb.dell_word(session, message.from_user.id, ans)
    bot.send_message(message.chat.id,
    f'–°–ª–æ–≤–æ "{ans}" –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è', reply_markup=buttons(1))


## –∑–∞–Ω–∏–º–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        random_word = random.choice(data['all_words'])
        data['all_words'].remove(random_word)
        target_word = random_word[0]
        translate_word = random_word[1]
        learn_words = data['learned_words'] + data['all_words']
        random.shuffle(learn_words)
        buttoms = [types.KeyboardButton(i[1]) for i in learn_words[:3]]
        buttoms.append(types.KeyboardButton(translate_word))
        random.shuffle(buttoms)
        markup.add(*buttoms[:2], row_width=2)
        markup.add(*buttoms[2:], row_width=2)
        markup.add(*buttons(3))
        greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {target_word}"
        bot.send_message(message.chat.id, greeting, reply_markup=markup)
        bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)
        data['target_word'] = target_word
        data['translate_word'] = translate_word
        data['another_words'] = learn_words[:3]
        data['learned_words'].append(random_word)


### —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏
@bot.message_handler(func=lambda message: message.text == Command.WORKOUT)
def workout_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    words = []
    for rus, en in session.query(md.UserWord.word_rus, md.UserWord.word_en).filter(md.UserWord.id_user == message.chat.id).order_by(
        md.UserWord.date_of_update.desc()).limit(8).all():
        words.append((rus, en))
    random_word = random.choice(words)
    words.remove(random_word)
    target_word = random_word[0]
    translate_word = random_word[1]
    random.shuffle(words)
    buttoms = [types.KeyboardButton(i[1]) for i in words[:3]]
    buttoms.append(translate_word)
    markup.add(*buttoms[:2], row_width=2)
    markup.add(*buttoms[2:], row_width=2)
    markup.add(*buttons(3))
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {target_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word
        data['another_words'] = words[:3]
        data['all_words'] = words
        data['learned_words'] = [random_word]

@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        translate_word = data['translate_word']
        if text == translate_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            markup = buttons(4)
            hint = show_hint(*hint_text)
        else:
            for btn in range(len(data['another_words'])):
                if data['another_words'][btn][1] == text:
                    data['another_words'][btn] = (data['another_words'][btn][0], text + '‚ùå')
                    break
            buttoms = []
            buttoms = [types.KeyboardButton(i[1]) for i in data['another_words']]
            buttoms.append(types.KeyboardButton(translate_word))
            markup.add(*buttoms)
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!", f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ {data['target_word']}")
            data['all_words'].append(data['learned_words'].pop(-1))

    bot.send_message(message.chat.id, hint, reply_markup=markup)


    

def buttons(flag):
    if flag == 1:
        buttons = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        wrk = types.KeyboardButton(Command.WORKOUT)
        buttons.extend([next_btn, add_word_btn, delete_word_btn, wrk])
        markup.add(*buttons)
        return markup
    if flag == 2:
        buttons = []
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        wrk = types.KeyboardButton(Command.WORKOUT)
        buttons.extend([next_btn, add_word_btn, delete_word_btn, wrk])
        return buttons
    if flag == 3:
        buttons = []
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        next_btn = types.KeyboardButton(Command.NEXT)
        buttons.extend([next_btn, add_word_btn, delete_word_btn])
        return buttons
    if flag == 4:
        buttons = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        buttons.extend([next_btn, add_word_btn, delete_word_btn])
        markup.add(*buttons)
        return markup

if __name__ == '__main__':
    print('Bot is running!')
    DBMS = 'postgresql'
    user = 'postgres'
    password = 'izvara32'
    host = 'localhost:5432'
    db_name = 'englishcard'
    global session
    engine, session = wb.connection_db(DBMS, user, password, host, db_name)
    wb.create_table(engine)
    wb.completion(session)
    bot.polling()